def calc_lms_montecarlo(K, mu, N, w0):
    """
    Realiza una simulación de Monte-Carlo del algoritmo LMS
    aplicado a un problema de predicción lineal de orden uno.
    
    K: número de simulaciones de Monte-Carlo
    mu: parámetro de paso
    N: número de iteraciones
    w0: valor inicial del filtro adaptativo
    """
    
    # Simulación de Monte Carlo
    w_montecarlo = np.zeros((N, 1))
    J_montecarlo = np.zeros((N, 1))
    
    for i in range(K):
        u = get_model_output(N)
        
        # Predicción LMS
        w = np.zeros((N, 1))
        J = np.zeros((N, 1))
        w[0] = w0
        
        for n in range(1, N):
            y = w[n] * u_noisy[n]
            d = u[n - delay]
            # y = w[n - 1] * u[n - 1]                 # Ecuación de filtrado
            # d = u[n]
            e = d - y
            J[n - 1] = e * e
            w[n] = w[n - 1] + mu * u[n - 1] * e     # Ecuación LMS
            
        J[N - 1] = J[N - 2]
        
        w_montecarlo += w
        J_montecarlo += J
        
    w_montecarlo /= K
    J_montecarlo /= K
    
    return (w_montecarlo, J_montecarlo)








mu1 = 0.08
mu2 = 0.02
mu3 = 0.005
N = 2000
w0 = 0

//Convergencia de una realización de LMS
K = 1

w1, J1 = calc_lms_montecarlo(K, mu1, N, w0)
w2, J2 = calc_lms_montecarlo(K, mu2, N, w0)
w3, J3 = calc_lms_montecarlo(K, mu3, N, w0)


plt.figure(figsize=(16, 12))
plt.plot(w1, label='LMS, $µ=%s$' % mu1)
plt.plot(w2, label='LMS, $µ=%s$' % mu2)
plt.plot(w3, label='LMS, $µ=%s$' % mu3)
plt.plot([0, len(w1) - 1], [-a, -a], color='k', linestyle='--', linewidth=2, label='$-a=%s$' % -a)
plt.xlabel('$n$', fontsize=14)
plt.ylabel('$w(n)$', fontsize=14)
plt.grid(True)
plt.title('$w(n)$ de una realización, para diferentes valores de $µ$', fontsize=14)
plt.legend(loc='upper right', fontsize=14)
plt.show()


//Se observa que conforme disminuye µ, disminuye la velocidad de convergencia, pero también disminuye el desajuste.

plt.figure(figsize=(16, 12))
plt.semilogy(J1)
plt.xlabel('$n$', fontsize=14)
plt.ylim(1e-7, 1e1)
plt.ylabel('$J_s(n)$', fontsize=14)
plt.grid(True)
plt.title('$J_s(n)$ de una realización, $µ=%s$' % mu1, fontsize=14)
plt.show()










